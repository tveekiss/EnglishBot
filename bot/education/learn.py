from aiogram.types import Message
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode

from bot.keyboards import level_kb, create_kb, start_keyboard

from bot.database import words


class Test(StatesGroup):
    answer = State()
    level = State()


async def starting(message: Message, state: FSMContext):
    if await words.len_learn_words(message.from_user.id) >= 15:
        await message.answer('–£ –≤–∞—Å –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ 15 —Å–ª–æ–≤ üôÅ\n'
                             '–ó–∞–∫—Ä–µ–ø–∏—Ç–µ —Å–ª–æ–≤–∞ –≤ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏ üß†')
        return
    await message.answer('üåüüìö –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ —Å–ª–æ–≤–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ,'
                         ' –∞ —Ç—ã –ø—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–µ—à—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å–Ω–∏–∑—É. ü§ó –ù–∏—á–µ–≥–æ —Å–ª–æ–∂–Ω–æ–≥–æ!'
                         ' –ï—Å–ª–∏ –≥–¥–µ-—Ç–æ –æ—à–∏–±–µ—à—å—Å—è, –Ω–µ –±–µ–¥–∞ - —è –¥–æ–±–∞–≤–ª—é —ç—Ç–æ —Å–ª–æ–≤–æ –≤ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ,'
                         ' —á—Ç–æ–±—ã —Ç—ã –º–æ–≥ –µ–≥–æ –ø–æ—Ç–æ–º –æ—Ç—Ç–æ—á–∏—Ç—å –∏ —Å—Ç–∞—Ç—å –µ—â–µ –ª—É—á—à–µ! üí™üöÄ')
    await message.answer("""
–ù–æ –¥–ª—è –Ω–∞—á–∞–ª–∞, –≤—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤: üåü

–ü–æ –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤—ã–¥–µ–ª—è—é—Ç—Å—è —Ç—Ä–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∏–ø–∞: 

1Ô∏è‚É£ <b>Basic</b> (–Ω–∞—á–∏–Ω–∞—é—â–∏–π)
2Ô∏è‚É£ <b>Independent</b> (—Å—Ä–µ–¥–Ω–∏–π)
3Ô∏è‚É£ <b>Proficient</b> (–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π)


–≠—Ç–∏ —É—Ä–æ–≤–Ω–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –¥–µ–ª—è—Ç—Å—è –µ—â–µ –Ω–∞ –¥–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. üìö

–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –ø–æ–ª—É—á–∞–µ—Ç—Å—è 6 —É—Ä–æ–≤–Ω–µ–π:
üë∂üèª <b>A1</b> (Elementary) ‚Äî –±–∞–∑–æ–≤—ã–π;
ü•± <b>A2</b> (Pre Intermediate) ‚Äî —Ö–æ—Ä–æ—à–∏–π –±–∞–∑–æ–≤—ã–π;
üí° <b>B1</b> (Intermediate) ‚Äî —Å—Ä–µ–¥–Ω–∏–π;
üí™üèª <b>B2</b> (Upper Intermediate) ‚Äî —Ö–æ—Ä–æ—à–∏–π —Å—Ä–µ–¥–Ω–∏–π;
üî• <b>C1</b> (Advanced) ‚Äî –≤—ã—Å–æ–∫–∏–π;
üòà <b>C2</b> (Proficiency) ‚Äî —Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π, —É—Ä–æ–≤–µ–Ω—å –Ω–æ—Å–∏—Ç–µ–ª—è.
                         """, reply_markup=level_kb, parse_mode=ParseMode.HTML)
    await state.set_state(Test.level)


async def introduction(message: Message, state: FSMContext):
    await message.answer('–û—Ç–ª–∏—á–Ω–æ! üåü –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Å—è –∫ –≤–µ—Å–µ–ª–æ–º—É –∏—Å–ø—ã—Ç–∞–Ω–∏—é! üìöüéâ'
                         ' –Ø –±—É–¥—É –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ç–µ–±–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞, –∞ —Ç—ã –ø–æ–ø—Ä–æ–±—É–µ—à—å –∏—Ö –ø–µ—Ä–µ–≤–µ—Å—Ç–∏.'
                         ' –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? üí¨üí°')
    await state.update_data(level=message.text.lower())
    await testing(message, state)


async def testing(message: Message, state: FSMContext):
    if await words.len_learn_words(message.from_user.id) >= 15:
        await message.answer('–£ –≤–∞—Å –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ 15 —Å–ª–æ–≤ üôÅ\n'
                             '–ó–∞–∫—Ä–µ–ø–∏—Ç–µ —Å–ª–æ–≤–∞ –≤ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏ üß†', reply_markup=start_keyboard)
        await state.clear()
        return
    context_data = await state.get_data()
    word_id, answers = await words.random_word(message.from_user.id, level=context_data['level'])
    word = await words.get_word_by_id(word_id)
    print(word)
    print(answers)
    await state.update_data(answers=answers, word=word.id)
    await message.answer(f'–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ <b>{word.eng}</b> ?', reply_markup=create_kb(answers, 0),
                         parse_mode=ParseMode.HTML)
    await state.set_state(Test.answer)


async def result(message: Message, state: FSMContext):
    context_data = await state.get_data()
    repeat = None
    answers = context_data['answers']
    word = await words.get_word_by_id(context_data['word'])
    print(answers)
    if message.text == '‚è™ –ó–∞–∫–æ–Ω—á–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ':
        await message.answer('‚ú® –ó–∞–∫–∞–Ω—á–∏–≤–∞—é ‚ú®', reply_markup=start_keyboard)
        await message.answer('–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å–Ω–∏–∑—É ‚§µÔ∏è')
        await state.clear()
        return
    if message.text == word.rus:
        repeat = 1
        await message.answer('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ ')
    elif message.text in answers:
        repeat = 2
        await message.answer(f'‚ùå –ù–µ–≤–µ—Ä–Ω–æ, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{word.rus}</b> ', parse_mode=ParseMode.HTML)
    else:
        await message.answer('‚ùóÔ∏è –ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞!')
        await state.set_state(Test.answer)
        return

    await words.add_word(message.from_user.id, context_data['word'], repeat)
    await testing(message, state)
